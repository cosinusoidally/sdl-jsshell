Problem statement is in ./README.txt . This file details the plan and progress
towards a fix.

Plan
====

Restructure the main loop to look something like this:

while(running){
  while(SDL_PollEvent(...)){
    // process all events in the queue, draining the whole queue in the process.
  }
  render(); // draw our frame;
  wait(); // where wait will wait for the next frame.
}

The wait function needs to get woken up each time our frame timer fires. To do
this it will wait on a condition variable. Something like this:

function wait(){
  SDL_CondWait(cond, mut);
}

SDL_CondWait will block until the condition varable is signalled (with
SDL_CondSignal).

* cond is our condition variable (we never actually modify this variable, we
  just wait on it).
* mut is SDL_mutex mutex object. During initialisation of our app we will lock
  this by the main thread and never permanently unlock it for the duration of
  the program (SDL_CondWait will temporarily unlock it, but it locks it again
  after SDL_CondWait returns).

As you can see all wait does it wait for SDL_CondWait to unblock. To unblock
SDL_CondWait we must call SDL_CondSignal from a timer callback function.


To setup our timer we schedule a periodic timer with SDL_AddTimer. The callback
will do 2 things:

* call SDL_CondSignal on a condition variable
* return the same interval value (this schedules the next timer callback)

The callback function cannot be written in JS (since the timer callback happens
from a different thread and in Spidermonkey jsctypes callbacks cannot be called
from a different thread).

Similar to v0.0.2 I'll generate a bit of machine code, load it in to RAM, patch
it up from JS, and then pass it to SDL_AddTimer as the callback function.


Progress
========

DONE
====

* write a dummy version of wait. This will allow me to move on to restructing
  the main loop before moving on to implementing the condition variable version
  of wait. The dummy version can just poll Date.now() until enough time
  elapses.


  Actually called wait function sdl.wait_for_next_frame (which is more descriptive)

  Also added code to measure and display framerate sdl.update_framerate (so I
  can get an idea of how stable the current framerate is)

  currently the framerate is a bit variable:

  js ./test.js

66.60039761431412
69.5134061569017
69.86027944111777
67.0611439842209
66.92913385826772
68.93106893106894
74.50980392156863
68.52035749751738
66.60039761431412
66.47116324535679
67.71344455348381
72.92707292707293

  This is actually higher than I expected, but as you can see it is does waver
  a bit between about 73 and 67. Maybe it is higher because the timer is firing
  more frequently than expected? Either way I'm not going to dig too much, the
  fix I am pursuing should stabalise the framerate and allow me to set it to a
  sensible value.

  I suspect there may be slight issues with my measurement method, but I think
  the method is ok as a guideline.

* restructure sdl.sdl_mainloop as per above plan
   
  also changed frame_internal to a multiple of 10 ms (since that is all the
  resolution you get with timer callbacks). Set to 20 ms (50Hz).

  frame rate is now a fairly stable 50Hz (but I am currently polling for time,
  which might explain that).
  
* Create a shared library written in C that is our timer callback. Also add to
  this library some auxilary code to create out muxtex and cond var
  
  I've called the library libcb (for lib callback).

* Write code to load in our shared library, bind it to JS and run init function
* start callback timer running
* Binding a few more SDL funtions to JS. Namely:
  
  SDL_CondWait
  
  and for the manipulation of the mutex:
  SDL_mutexP (we will use this to lock the mutex)
  SDL_mutexV (to unlock the mutex, probably not needed)

* Reimplement wait to use SDL_CondWait

* move creation of mutex and condition variable into JS ie bind and call:

  SDL_CreateMutex
  SDL_CreateCond

* Replace our shared library with small chunks of machine code that are loaded
  and patched up by JS (this is to avoid depending on needing a C compiler, or
  the need to distribute a binary .dll or .so file). This will be done in much
  the same way as v0.0.2 does it for its timer callbacks.

IN-PROGRESS
===========

* Proofread all the documentation and update it to reflect what the code actually
  does.

TODO
====

